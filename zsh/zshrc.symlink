. ~/.zshrc.local

umask 022

# Disable tty flow control (C-S / C-Q).
stty -ixon

#** Aliases **# {{{
alias v='less'
alias mv='nocorrect mv -i'
alias cp='nocorrect cp -i'
alias mkdir='nocorrect mkdir'
case `uname` in
    SunOS)
        alias rm='nocorrect rm -i'
        ;;
    *)
        alias rm='nocorrect rm -I'
        ;;
esac
alias j=jobs
alias pu=pushd
alias po=popd
alias d='dirs -v'
case `uname` in
    SunOS)
        alias grep=egrep
        ;;
    *)
        alias grep='egrep --colour'
        ;;
esac
alias vlm='less /var/log/messages'
alias bc='bc -l'
alias tt='tail -F'
alias la='l -a'
alias lla='ll -a'
# List only directories and symbolic links that point to directories.
alias lsd='ls -ldh *(-/DN)'
# List only file beginning with ".".
alias lsa='ls -ldh .*'
alias bkd='date +%FT%H%M'
case `uname` in
    Linux|CYGWIN*|SunOS)
        alias ll='ls -lhF --color=auto'
        alias l='ls -F --color=auto'
        alias sed='sed -r'
        ;;
    *)
        alias ll='ls -lhFG'
        alias l='ls -FG'
        alias sed='sed -E'
        ;;
esac
alias mq='hg -R $(hg root)/.hg/patches'
alias hdfs='hadoop dfs'
alias nhive='/usr/local/bin/hive --namespace'
case `uname` in
    Linux)
        alias gmake=make
        ;;
esac
# Debian specific aliases
if [ which lsb_release >/dev/null 2>&1 ]; then
    if [[ ${$(lsb_release -i)##*:} =~ Debian ]]; then
        alias ack=ack-grep
    fi
fi

# Global aliases -- These do not have to be at the beginning of the command
# line.
alias -g L='|less'
alias -g L2=' 2>&1 |less'
alias -g Lj='| python -mjson.tool | less'
alias -g H='|head'
alias -g T='|tail'
alias -g G='|grep'
alias -g G2=' 2>&1|grep'
alias -g Gv='|grep -v'
alias -g Gi='|grep -i'
alias -g W='|wc -lwm'
alias -g Wl='|wc -l'
alias -g Bg=' >/dev/null 2>&1 &!'
# alias -g D='; notify-send "$history[$HISTCMD]ONE" "exit-code: $?"'
alias -g D='; tmux display-message "$history[$HISTCMD]ONE: exit-code: $?"; echo -e "\a"'
alias -g C1="| awk '{print \$1}'"
alias -g C2="| awk '{print \$2}'"
alias -g C3="| awk '{print \$3}'"
alias -g C4="| awk '{print \$4}'"
alias -g C5="| awk '{print \$5}'"
alias -g C6="| awk '{print \$6}'"
alias -g C7="| awk '{print \$7}'"
alias -g C8="| awk '{print \$8}'"
alias -g C9="| awk '{print \$9}'"
alias -g C10="| awk '{print \$10}'"
alias -g C11="| awk '{print \$11}'"
alias -g S='|sort'
alias -g U='|sort -u'
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
# }}}

# Shell functions
freload() { while (( $# )); do unfunction $1; autoload -U $1; shift; done }

# Where to look for autoloaded function definitions
fpath=($fpath ~/.zfunc)
autoload -U zfinit

# Autoload all shell functions from all directories in $fpath (following
# symlinks) that have the executable bit on (the executable bit is not
# necessary, but gives you an easy way to stop the autoloading of a
# particular shell function). $fpath should not be empty for this to work.
for func in $^fpath/*(N-.x:t); do autoload $func; done


# To manipulate precmd and preexec hooks...
autoload -Uz add-zsh-hook

case `uname` in
    "DragonFly")
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/pkg/man /usr/share/man) ;;
    "Darwin")
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/local/man /usr/share/man /opt/local/man)
        PATH="$PATH:/opt/local/bin:/opt/local/sbin" ;;
    CYGWIN*)
        PATH="$PATH:/cygdrive/c/Program Files/Wireshark:/cygdrive/c/Program Files/nodejs:/cygdrive/c/mvn3.2.3/bin:/cygdrive/c/emacs/bin:/cygdrive/c/Program Files (x86)/scala/bin/" ;;
    *)
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/local/man /usr/share/man) ;;
esac
export MANPATH

export PATH="$PATH:$HOME/bin"

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath


# Hosts to use for completion (see later zstyle)
local hosts
#hosts=( ${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*} )
hosts=(0x746e.org.ua test-3.blikbook.com moodlebox jenkins)



#** Tmux window title **# {{{
_DEFAULT_TMUX_WINDOW_TITLE="zsh"
function _in_tmux() {
    test -n "$TMUX"
}

function _set-tmux-window-title() {
    _in_tmux && echo -n "\033k$1\033\\"
}

function _get-tmux-window-title() {
    _in_tmux && tmux display-message -p '#W'
}

# A hook executed just after a command has been read and is about to be executed.
function tmux-window-title-preexec {
    cmd_to_be_executed="$1"
    function async_set_tmux_window_title() {
        if [ "$(_get-tmux-window-title)" = "$_DEFAULT_TMUX_WINDOW_TITLE" ]; then
            _set-tmux-window-title "% $cmd_to_be_executed"
        fi
    }
    _in_tmux && async_set_tmux_window_title &!
}
add-zsh-hook preexec tmux-window-title-preexec

# A hook executed before each prompt.
function tmux-window-title-precmd {
    function async_reset_tmux_window_title() {
        if [[ "$(_get-tmux-window-title)" =~ '^% .*$' ]]; then
            _set-tmux-window-title "$_DEFAULT_TMUX_WINDOW_TITLE"
        fi
    }
    _in_tmux && async_reset_tmux_window_title &!
}
add-zsh-hook precmd tmux-window-title-precmd
# }}}


#** Prompts **# {{{
# A hook executed before each prompt.
function async-prompt-precmd {
    RPROMPT=""

    function async_prompt() {
        hg prompt --angle-brackets '%F{red}<branch> <%B[<bookmark>]%b >%f%F{yellow}%B<<tags> >%b%f%F{green}<status|modified|unknown><update>%f ' 2>/dev/null >| "$HOME/.zsh_tmp_prompt"
        kill -s USR1 $$
    }
    async_prompt &!
}
add-zsh-hook precmd async-prompt-precmd

function TRAPUSR1() {
    # read from temp file
    RPROMPT="$(cat ${HOME}/.zsh_tmp_prompt)"

    # reset proc number
    # ASYNC_PROC=0

    # redisplay
    zle && zle reset-prompt
}

autoload -U promptinit
promptinit
## Currently available prompt themes:
## adam1 adam2 bart bigfade clint elite2 elite
## fade fire off oliver redhat suse walters zefram
# prompt adam1
##TODO
prompt mine black cyan cyan $HOST_PROMPT_COLOR
# }}}

# Some environment variables
export EDITOR='vim'
export MAIL=/var/mail/$USERNAME

# `less` settings:
# * --RAW-CONTROL-CHARS is for showing ANSI control sequences as colors.
# * `--no-init` is to prevent it to clear output on exit. This is important
#   when the file viewed by less is shorter than one screen and `--quit-if-one-screen`
#   is set.  In such case less exists right away, so if it also cleans the
#   screen nothing at all is shown.
export LESS="--ignore-case --no-init --quit-if-one-screen --LONG-PROMPT --RAW-CONTROL-CHARS"
export PAGER=less

# When opening manpages (`man whatever`) the actual manpage source is
# un-gzipped, piped through `[gn*]roff`, and then the result is piped into
# `less`.  By default `less` doesn't show percentage of input piped into it.
# Thus to force `less` to read all the input to be able to say progress in
# percent we command to go to the end of the file, and then back to the
# beginning.
export MANPAGER="less +Gg"

export HELPDIR=/usr/local/lib/zsh/help  # directory for run-help function to find docs
#export EMAIL=tn@0x746e.org.ua
#export HGUSER=$EMAIL

MAILCHECK=300
DIRSTACKSIZE=20

#** History **# {{{
HISTSIZE=50000
SAVEHIST=50000
HISTFILE="$HOME/.zsh_history"
setopt extended_history
setopt hist_expire_dups_first
setopt inc_append_history
setopt hist_find_no_dups
setopt hist_reduce_blanks

_ISO_DATETIME_FORMAT='%Y-%m-%d %H:%M:%S'
_zsh_startup_time=$(date +"$_ISO_DATETIME_FORMAT")
alias hall="fc -t '$_ISO_DATETIME_FORMAT' -D -l 1 | less +G"
function h() { # Show history from this shell session only.
    hall | awk "{
        entry_time = \$2 \" \" \$3;
        if (entry_time >= \"$_zsh_startup_time\") {
            print
        }
    }"
}
# }}}

# Set/unset shell options
setopt   nobeep
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume pushdsilent noclobber
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

# Autoload zsh modules when they are referenced
zmodload -F zsh/stat b:zstat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile

#** Key bindings **# {{{
#bindkey '^X^Z' universal-argument ' ' magic-space
#bindkey '^X^A' vi-find-prev-char-skip
#bindkey '^Z' accept-and-hold
#bindkey -s '\M-/' \\\\
#bindkey -s '\M-=' \|
# bindkey -v               # vi key bindings
bindkey -e                 # emacs key bindings
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand
# Bindkey macros.
bindkey -s "^Xr" 'source ~/.zshrc\n'
# }}}


#** Completion **# {{{
# Setup new style completion system. To see examples of the old style (compctl
# based) programmable completion, check Misc/compctl-examples in the zsh
# distribution.
autoload -U compinit
compinit -i

# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
zstyle '*' hosts $hosts

# Filename suffixes to igbnore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

#'
# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

# Disable completing `cd username`.
zstyle ':completion:*:complete:(cd|pushd):*' tag-order \
  'local-directories path-directories directory-stack' '*'
# }}}


#** Misc Functions **# {{{

ud () {
    if [ ! -z "$1" ]
    then
        python -c "
from __future__ import print_function
import time
from datetime import datetime

ts2dt = datetime.fromtimestamp
dt2ts = lambda dt: time.mktime(dt.timetuple())

def looks_like_time(num):
    return 0 <= num <= dt2ts(datetime.max)

ts = $1

if looks_like_time(ts):
    print(ts2dt(ts))
elif looks_like_time(ts / 1000):  # milliseconds
    print(ts2dt(ts / 1000.), '(milisecond-precision timestamp)')
elif looks_like_time(ts / 1000000):  # microseconds
    print(ts2dt(ts / 1000000.), '(microsecond-precision timestamp)')
else:
    print('Doesn''t look like timestamp')
"
    fi
}

# pG scripts
pG () {
    if [ -z "$1" ]; then
        ps auxww | less
    else
        ps auxww | fgrep -v grep | grep "($1|^USER.*)"
    fi
}
pGi () {
    if [ -z "$1" ]; then
        ps auxww | less
    else
        ps auxww | fgrep -v grep | grep -i "($1|^USER.*)"
    fi
}
pGp () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { print \$2 }"
    else
        echo "Usage: $0 pattern"
    fi
}
pGk () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { system(\"kill \"\$2) }"
    else
        echo "Usage: $0 pattern"
    fi
}
pG9 () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { system(\"kill -9 \"\$2) }"
    else
        echo "Usage: $0 pattern"
    fi
}
#
cman () {
    if [ ! -z "$1" ]; then
        groff -man -Tascii "$1"
    else
        echo "Usage: $0 manual_file"
    fi
}
vman () {
    if [ ! -z "$1" ]; then
        groff -man -Tascii "$1" | less
    else
        echo "Usage: $0 manual_file"
    fi
}
cm () {
    mkdir -p "$1"
    cd "$1"
}
hr () {
    python -c '
from __future__ import division
import sys
def usage():
    print "Usage: hr <number-in-bytes>"
    exit(1)
if len(sys.argv) != 2:
    print sys.argv
    usage()
try:
    num = int(sys.argv[1])
except ValuError:
    usage()

symbols = [
    (1024, "B"),
    (1024**2, "kB"),
    (1024**3, "MB"),
    (1024**4, "GB"),
    (1024**5, "TB"),
    (1024**6, "PB"),
    (1024**7, "EB"),
]
for ceil, symbol in symbols:
    if num < ceil:
        print "%.2f %s" % ((num / (ceil / 1024)), symbol)
        break
else:
    max_ceil, max_symbol = symbols[-1]
    print "%.2f %s" % ((num / (max_ceil / 1024)), max_symbol)
' "$1"
}
days-ago() {
    if [ $# -eq 1 ]; then
        python -c "from datetime import date, timedelta; print date.today() - timedelta(days=$1)"
    elif [ $# -eq 2 ]; then
        python -c "from datetime import datetime, timedelta; print datetime.strptime('$1', '%Y-%m-%d').date() - timedelta(days=$2)"
    else
        echo "Usage: $0 [date-count-from] num-of-days" 1>&2
        return 1
    fi
}
#
#vv () {
#    file="$1"
#    mime_type=`file --brief --mime-type $file`
#    type_group=${mime_type%%/*}  # 'image/jpeg' → 'image' and so on
#    echo $file": "$type_group
#}
# }}}
