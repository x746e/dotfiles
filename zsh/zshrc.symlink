#
# Example .zshrc file for zsh 4.0
#
# .zshrc is sourced in interactive shells.  It
# should contain commands to set up aliases, functions,
# options, key bindings, etc.
#

. ~/.zshrc.local

# Search path for the cd command
#cdpath=(.. ~ ~/src ~/zsh)

## useful bindkey macros
bindkey -s "^Xm" 'mutt\n' ## run mutt
#!! bindkey -s "^Xc" 'mcdrom\n' ## mount or umount cdrom
#!! bindkey -s "^Xf" 'mflash\n' ## mount or umount flash

if false; then
    mesg y
fi

# Use hard limits, except for a smaller stack and no core dumps
unlimit
if false; then
    limit stack 8192
    limit core 0
fi
limit -s

umask 022

# Set up aliases
alias v='less'                ##TODO: script for viewing different file types
alias vv='vim -R'
alias mv='nocorrect mv'       # no spelling correction on mv
alias cp='nocorrect cp'       # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias rm='rm -I'
alias j=jobs
alias pu=pushd
alias po=popd
alias d='dirs -v'
alias h=history
alias grep=egrep --colour
alias vlm='less /var/log/messages'
alias bc='bc -l'
alias tt='tail -F'
alias pL='ps auxww|less'
alias la='l -a'
alias lla='ll -a'
alias bkd='date +%FT%H%M'
case `uname` in
    "Linux"|CYGWIN*)
        alias ll='ls -lF --color=auto'
        alias l='ls -FG --color=auto'
        alias sed='sed -r'
        ;;
    *)
        alias ll='ls -lFG'
        alias l='ls -FG'
        alias sed='sed -E'
        ;;
esac
alias mq='hg -R $(hg root)/.hg/patches'
#alias -g sd='export DISPLAY='

# List only directories and symbolic
# links that point to directories
alias lsd='ls -ld *(-/DN)'

# List only file beginning with "."
alias lsa='ls -ld .*'

alias tpp='cd ~/mfiles/transproject/transproject && source ../venv/bin/activate'

# Shell functions
setenv() { typeset -x "${1}${1:+=}${(@)argv[2,$#]}" }  # csh compatibility
freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }

# Where to look for autoloaded function definitions
fpath=($fpath ~/.zfunc)
autoload -U zfinit

# Autoload all shell functions from all directories in $fpath (following
# symlinks) that have the executable bit on (the executable bit is not
# necessary, but gives you an easy way to stop the autoloading of a
# particular shell function). $fpath should not be empty for this to work.
for func in $^fpath/*(N-.x:t); autoload $func

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

# Global aliases -- These do not have to be
# at the beginning of the command line.
alias -g L='|less'
alias -g L2=' 2>&1 |less'
alias -g Lj='| python -mjson.tool'
alias -g H='|head'
alias -g T='|tail'
alias -g G='|egrep --colour'
alias -g Gv='|egrep -v --colour'
alias -g Gi='|egrep -i --colour'
alias -g W='|wc -lwm'
alias -g Wl='|wc -l'
alias -g Bg=' >/dev/null 2>&1 &!'
alias -g D='; notify-send "$history[$HISTCMD]ONE" "exit-code: $?"'
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'

case `uname` in
    "DragonFly")
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/pkg/man /usr/share/man) ;;
    "Darwin")
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/local/man /usr/share/man /opt/local/man)
        PATH="$PATH:/opt/local/bin:/opt/local/sbin" ;;
    *)
        manpath=(/usr/X11R6/man /usr/man /usr/lang/man /usr/local/man /usr/share/man) ;;
esac
export MANPATH

export PATH="$PATH:$HOME/bin"

# Hosts to use for completion (see later zstyle)
local hosts
#hosts=( ${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*} )
hosts=(0x746e.org.ua test-3.blikbook.com moodlebox jenkins)


# Set prompts
# set screen screen's window name ( user@host )
## TODO user@host:cmd
if [[ "$TERM" = screen* ]]; then
    echo -n "\033k$USER@${HOST%%.*}\033\\"
fi

if false; then
    xset b off
fi

autoload -U promptinit
promptinit
## Currently available prompt themes:
## adam1 adam2 bart bigfade clint elite2 elite
## fade fire off oliver redhat suse walters zefram
#prompt adam1
##TODO
prompt mine black cyan cyan $HOST_PROMPT_COLOR


#PROMPT='%# '    # default prompt
#RPROMPT=' %~'     # prompt for right side of screen
#if [ $TERM = "screen" ];
#then
#    export TERM='xterm'
#    PROMPT="s$WINDOW%# "
#fi


# Some environment variables
export SHELL='zsh'
export EDITOR='vim'
export MAIL=/var/mail/$USERNAME
#export LESS=-cx3MR
# less settings:
# -F or --quit-if-one-screen
# -M or --LONG-PROMPT
# -R or --RAW-CONTROL-CHARS  : for colors
# -X or --no-init  : hell knows what it is for
#export LESS="FMR"
export HELPDIR=/usr/local/lib/zsh/help  # directory for run-help function to find docs
export PAGER=less
#export LC_CTYPE=ru_RU.UTF-8
#export LC_COLLATE=C
export EMAIL=tn@0x746e.org.ua
export HGUSER=$EMAIL
#if [ -n "$TMUX" ]; then
#    export TERM="screen.xterm-new"
#fi

MAILCHECK=300
HISTSIZE=500000
DIRSTACKSIZE=20

# Watch for my friends
#watch=( $(<~/.friends) )       # watch for people in .friends file
#watch=(notme)                   # watch for everybody but me
#LOGCHECK=300                    # check every 5 min for login/logout activity
#WATCHFMT='%n %a %l from %m at %t.'

# Set/unset  shell options
setopt     nobeep
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent noclobber
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

# Autoload zsh modules when they are referenced
zmodload -F zsh/stat b:zstat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile

# Some nice key bindings
#bindkey '^X^Z' universal-argument ' ' magic-space
#bindkey '^X^A' vi-find-prev-char-skip
#bindkey '^Xa' _expand_alias
#bindkey '^Z' accept-and-hold
#bindkey -s '\M-/' \\\\
#bindkey -s '\M-=' \|

# bindkey -v               # vi key bindings

bindkey -e                 # emacs key bindings
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand


# Setup new style completion system. To see examples of the old style (compctl
# based) programmable completion, check Misc/compctl-examples in the zsh
# distribution.
autoload -U compinit
compinit



# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
zstyle '*' hosts $hosts

# Filename suffixes to igbnore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

#'
# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

#
# Misc Functions
#

ud () {
    if [ ! -z "$1" ]
    then
        python -c "import datetime; print datetime.datetime.fromtimestamp($1)"
    fi
}

# pG scripts
pG () {
    if [ -z "$1" ]; then
        ps auxww | less
    else
        ps auxww | fgrep -v grep | egrep --colour "($1|^USER.*)"
    fi
}
pGi () {
    if [ -z "$1" ]; then
        ps auxww | less
    else
        ps auxww | fgrep -v grep | egrep --ignore-case --colour "($1|^USER.*)"
    fi
}
pGp () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { print \$2 }"
    else
        echo "Usage: $0 pattern"
    fi
}
pGk () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { system(\"kill \"\$2) }"
    else
        echo "Usage: $0 pattern"
    fi
}
pG9 () {
    if [ ! -z "$1" ]; then
        ps auxww | awk "/$1/ && !/grep/ { system(\"kill -9 \"\$2) }"
    else
        echo "Usage: $0 pattern"
    fi
}
#
cman () {
    if [ ! -z "$1" ]; then
        groff -man -Tascii $1
    else
        echo "Usage: $0 manual_file"
    fi
}
vman () {
    if [ ! -z "$1" ]; then
        groff -man -Tascii $1 | less
    else
        echo "Usage: $0 manual_file"
    fi
}
cm () {
    mkdir "$1"
    cd "$1"
}
#
#vv () {
#    file="$1"
#    mime_type=`file --brief --mime-type $file`
#    type_group=${mime_type%%/*}  # 'image/jpeg' â†’ 'image' and so on
#    echo $file": "$type_group
#}


## Windows additions
export PATH=$PATH:/cygdrive/c/Program\ Files/Wireshark:/cygdrive/c/Program\ Files/nodejs
