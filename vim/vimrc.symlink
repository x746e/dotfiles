" vim: foldmethod=marker
"

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'VundleVim/Vundle.vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'majutsushi/tagbar'
Plugin 'moll/vim-bbye'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-syntastic/syntastic'

call vundle#end()

let dotfiles_ext_vimrc = expand("~/dotfiles-ext/vimrc")
if filereadable(dotfiles_ext_vimrc)
    silent! execute 'source '.dotfiles_ext_vimrc
endif

" Settings {{{
syntax on

syntax enable
filetype on
filetype plugin on
filetype indent on

" Automatically setting options in various files
set modeline
set modelines=5

" Available TAGS files
set tags=./TAGS,./tags,tags
let more_tags = join(globpath('~/.vimtags', '*.tags', 0, 1), ',')
if strlen(more_tags)
    let &tags .= ','.more_tags
endif

" Don't add EOF at end of file
set noendofline

" don't refuse to change files
set hidden

" Search settings
set incsearch
set ignorecase
set smartcase
set nohlsearch

set showcmd
set showmode

" Vim beeping go to the hell...
set noerrorbells
set visualbell
set t_vb=

"" tabs and company
" A four-space tab indent width is the prefered coding style for Python (and
" everything else!), although of course some disagree. This page generally
" assumes you want 4-space indents.
set tabstop=8
" People like using real tab character instead of spaces because it makes it
" easier when pressing BACKSPACE or DELETE, since if the indent is using
" spaces it will take 4 keystrokes to delete the indent. Using this setting,
" however, makes VIM see multiple space characters as tabstops, and so <BS>
" does the right thing and will delete four spaces (assuming 4 is your
" setting).
set softtabstop=4
" This allows you to use the < and > keys from VIM's visual (marking) mode
" to block indent/unindent regions
set shiftwidth=4
" Use spaces instead of tabs
set expandtab
" Round indent to multiple of 'shiftwidth'.
set shiftround

set foldmethod=marker
set listchars=eol:$,tab:>-
set backspace=indent,eol,start

" wild settings
set wildmode=list:longest,full

" Wrapping settings
set linebreak
set showbreak=->
set display=lastline

set background=dark
colorscheme koehler
hi Search term=reverse ctermfg=black ctermbg=yellow guifg=black guibg=yellow

" Status line settings {{{
":set ruler
" Display a status-bar.
set laststatus=2
if has("statusline")
    " display "# " when run as root
    set statusline=%5*%{GetID()}%0*
    " filename
    set statusline+=%<%f
    " modified & readonly flags
    set statusline+=\ %3*%m%1*%r%0*
    " filetype & preview flags
    set statusline+=\ %2*%y%4*%w%0*
    " from here on align to the right
    set statusline+=%=
    " syntastic status
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    " todo status
    " set statusline+=%2*
    " set statusline+=%{GetTODOStatus()}
    " set statusline+=%0*
    " value of the character under cursor (printable and in hex)
    set statusline+=%12([%b\ 0x%B]%)
    " line number # number of lines in buffer
    set statusline+=\ \ %8l/%L,
    " column number / line length
    set statusline+=%10([%v/%{strlen(getline(line('.')))}]%)
    " percentage through the file
    set statusline+=\ %P
endif
" }}}

" Setting end }}}

" Mappings {{{
let mapleader = ","
nmap <S-F7> :!python %<CR>

set pastetoggle=<F12>

" Make Y work like D and C.  Not vi-compatable.
map Y y$

" Clear last used search pattern (and highlight for it)
map <silent> <Leader>sc :let @/ = ""<CR>

map coS :SyntasticToggleMode<CR>

" Mappings End }}}

" Functions {{{

" Function GetID() {{{
" - used in statusline.
" If you are root, function return "# " string --> it is showed at begin of
"                                                  statusline
" If you aren't root, function return empty string --> nothing is visible
let g:get_id=""
if executable("id")
    " Check for your name ID
    let g:get_id = $USER
    " If you are root, set to '#', else set to ''
    if g:get_id == "root"
        let g:get_id = "# "
    else
        let g:get_id = ""
    endif
endif
fun! GetID()
    return g:get_id
endfun
" GetID() }}}

fun! CountMatchesInComments(pattern)
    fun! IsComment(line, col)
        return synIDattr(synIDtrans(synID(a:line, a:col, 1)), 'name') == 'Comment'
    endfun

    let cnt = 0
    let linenum = 1
    for mline in getline(1, '$')
        let mcol = match(mline, a:pattern)
        if mcol != -1 && IsComment(linenum, mcol) == 1
            let cnt = cnt + 1
        endif
        let linenum = linenum + 1
    endfor
    return cnt
endfun

let g:todo_pattern = 'TODO\|XXX\|FIXME\|WTF\C'

fun! GetTODOStatus()
    let todo_num = CountMatchesInComments(g:todo_pattern)
    if todo_num > 0
        return '|' . todo_num . ' TODO items.|'
    else
        return ''
    endif
endfun

noremap <silent> [z :call search(g:todo_pattern, 'b')<CR>
noremap <silent> ]z :call search(g:todo_pattern)<CR>

" TODO:
"  * push :vim command to history (see :keepp)
"  * use `:grep`?
fun! VimGrepInSource(term)
    let ext = expand('%:e')
    if ext == 'py'
        let search_glob = "**/*.py **/*.rst"
    elseif ext == 'c' || ext == 'h' || ext == 'cpp' || ext == 'cxx' || ext == 'cc'
        let search_glob = "**/*.c **/*.h **/*.cpp **/*.cxx **/*.cc"
    else
        let search_glob = "**/*.".ext
    endif

    let saved_syntastic_check_on_open = g:syntastic_check_on_open
    let g:syntastic_check_on_open = 0
    execute "vimgrep /\\<" . a:term . "\\>\\C/ " . search_glob . " | clist"
    let g:syntastic_check_on_open = saved_syntastic_check_on_open
endfun
nmap <Leader>* :call VimGrepInSource(expand("<cword>"))<CR>


fun! SelectionToTmuxBuffer()
    " Save register " to file
    redir! > /tmp/vim-tmux-buffer
    silent echo @"
    redir END
    " Load file to tmux buffer
    silent ! tmux load-buffer /tmp/vim-tmux-buffer 2>&1 >/dev/null
    redraw!
endfun
vmap <Leader>B y:call SelectionToTmuxBuffer()<CR>

"" EndFunctions }}}

" for postgresql {{{
if match(getcwd(), "/pgsql") >=0 || match(getcwd(), "/postgres") >= 0
    set cinoptions=(0
    set tabstop=4
    set shiftwidth=4
endif
" }}}

" Plugin settings (& mappings) {{{
" tagbar
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_width = 60
let g:tagbar_compact = 1
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_foldlevel = 0
nnoremap <silent> <Leader>t :TagbarToggle<CR>

" buffexplorer
let g:bufExplorerShowRelativePath = 1
let g:bufExplorerSplitOutPathName = 0
let g:bufExplorerDisableDefaultKeyMapping = 1
nnoremap <silent> <Leader>l :BufExplorer<CR>

" Flake8
let g:flake8_ignore="E126,E128,E121,E124"

" NERDTree
noremap <silent> <Leader>f :NERDTreeFind<CR>
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowBookmarks = 1

" syntastic
let g:syntastic_python_checkers = ['pyflakes', 'flake8', 'pep8']
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_c_include_dirs = ['../..']
" augroup syntastic
"     autocmd CursorHoldI,CompleteDone,CursorHold,InsertLeave * nested update
" augroup END
set updatetime=700

" vim-bbye
nnoremap <Leader>bw :Bdelete<CR>

" YCM
let g:ycm_auto_trigger = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
noremap <silent> <Leader>gg :YcmCompleter GoTo<CR>
noremap <silent> <Leader>gc :YcmCompleter GoToDefinition<CR>
noremap <silent> <Leader>gh :YcmCompleter GoToDeclaration<CR>
" }}} Plugin settings

command! ReloadVimrc source ~/.vimrc

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" TODO: define a way to exit this
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
       \ | wincmd p | diffthis
endif

" digraphs
" https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts#Other_superscript_and_subscript_characters
digraphs ^n 8319 " ‚Åø

vmap <Leader>h :<C-U>!hg blame -fu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
